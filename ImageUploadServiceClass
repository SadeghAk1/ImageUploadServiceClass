    public class ImageUploadService : IFileUploadService
    {
        private readonly string _uploadDirectory;
        private readonly ILogger<ImageUploadService> _logger;
        private readonly string[] _allowedExtensions = { ".jpg", ".jpeg", ".png", ".gif", ".webp" };
        private const long MaxFileSize = 5 * 1024 * 1024; // 5 MB

        public ImageUploadService(ILogger<ImageUploadService> logger)
        {
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
            _uploadDirectory = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "uploads", "images");
            if (!Directory.Exists(_uploadDirectory))
            {
                Directory.CreateDirectory(_uploadDirectory);
                _logger.LogInformation($"Upload directory created: {_uploadDirectory}");
            }
        }
        public async Task<string> UploadImageAsync(IFormFile file)
        {
            if (file == null || file.Length == 0)
            {
                throw new ArgumentException("File is empty.");
            }
            if (file.Length > MaxFileSize)
            {
                throw new ArgumentException($"File size exceeds the limit of {MaxFileSize / (1024 * 1024)} MB.");
            }
            var extension = Path.GetExtension(file.FileName).ToLowerInvariant();
            if (!_allowedExtensions.Contains(extension))
            {
                throw new ArgumentException($"File type {extension} is not supported.");
            }
            var fileName = Guid.NewGuid()+Path.GetExtension(file.FileName).ToLowerInvariant();
            var filePath = Path.Combine(_uploadDirectory, fileName);
            using (var stream = new FileStream(filePath, FileMode.Create))
            {
                await file.CopyToAsync(stream);
            }
            _logger.LogInformation($"File uploaded successfully: {filePath}");
            return fileName;
        }
    }
